const express = require('express');
const app = express();
app.use(express.json());

let seats = Array.from({ length: 10 }, (_, i) => ({
  id: i + 1,
  status: 'available',
  lockedBy: null,
  lockTime: null
}));

function unlockExpiredSeats() {
  const now = Date.now();
  seats.forEach(seat => {
    if (seat.status === 'locked' && now - seat.lockTime > 60000) {
      seat.status = 'available';
      seat.lockedBy = null;
      seat.lockTime = null;
    }
  });
}

setInterval(unlockExpiredSeats, 5000);

app.get('/seats', (req, res) => {
  unlockExpiredSeats();
  res.json(seats);
});

app.post('/lock/:id', (req, res) => {
  const { user } = req.body;
  const seat = seats.find(s => s.id === parseInt(req.params.id));
  unlockExpiredSeats();
  if (!seat) return res.status(404).json({ message: 'Seat not found.' });
  if (seat.status === 'booked') return res.status(400).json({ message: 'Seat already booked.' });
  if (seat.status === 'locked') return res.status(400).json({ message: 'Seat currently locked by another user.' });
  seat.status = 'locked';
  seat.lockedBy = user;
  seat.lockTime = Date.now();
  res.json({ message: `Seat ${seat.id} locked successfully for user ${user}.` });
});

app.post('/confirm/:id', (req, res) => {
  const { user } = req.body;
  const seat = seats.find(s => s.id === parseInt(req.params.id));
  unlockExpiredSeats();
  if (!seat) return res.status(404).json({ message: 'Seat not found.' });
  if (seat.status === 'booked') return res.status(400).json({ message: 'Seat already booked.' });
  if (seat.status !== 'locked' || seat.lockedBy !== user) return res.status(400).json({ message: 'You must lock this seat before confirming.' });
  seat.status = 'booked';
  seat.lockedBy = null;
  seat.lockTime = null;
  res.json({ message: `Seat ${seat.id} booked successfully by user ${user}.` });
});

app.listen(3000, () => console.log('Server running on port 3000'));
